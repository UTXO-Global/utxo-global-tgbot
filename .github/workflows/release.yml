name: Release API

on:
  push:
    branches: [staging, prod]

env:
  CURRENT_SERVICE: ${{ github.event.repository.name }}
  AWS_ECR_URI: 604313529175.dkr.ecr.ap-southeast-1.amazonaws.com
  NAMESPACE: ${{ github.ref_name }}
  ZONE: ap-southeast-1
  CLUSTER_NAME: fewcha_remake
  AWS_ACCOUNT_ID: 604313529175

jobs:
  build_and_publish:
    name: Build And Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          version: "1.83.0"

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        id: auth
        with:
          project_id: ${{ env.PROJECT_ID }}
          workload_identity_provider: "projects/624428081092/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider"
          service_account: "github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Get GKE credential
        uses: "google-github-actions/get-gke-credentials@v2"
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.REGION }}
          
      - name: Release Build
        run: cargo build --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Service docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: k8s/Dockerfile
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CURRENT_SERVICE }}/${{ env.CURRENT_SERVICE }}:${{ env.NAMESPACE }}
          cache-from: type=registry,ref=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CURRENT_SERVICE }}/${{ env.CURRENT_SERVICE }}:${{ env.NAMESPACE }}
          cache-to: type=inline

      - name: Apply to K8S
        run: |-
          kubectl rollout restart -n utxo-global-${{ env.NAMESPACE }} deploy ${{ env.CURRENT_SERVICE }}
